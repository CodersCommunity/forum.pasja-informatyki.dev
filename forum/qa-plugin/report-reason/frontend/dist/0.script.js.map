{"version":3,"sources":["webpack:///./src/ajaxService.js","webpack:///./src/misc.js","webpack:///./src/popupController.js","webpack:///./src/popupFactory.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEe,uEAAQ,EAAC;;;;;;;;;;;;;ACtCxB;AAAA;AAAA;AAAA,OAAO,8BAA8B;;AAE9B;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,cAAc;AACnC;AACA;AACA;AACA;AACA;AACA,MAAM,qDAAqD;AAC3D;AACA;AACA;AACA,8BAA8B,UAAU;AACxC,iCAAiC,UAAU;AAC3C;AACA,qCAAqC,MAAM;AAC3C;AACA;AACA,sBAAsB;AACtB;AACA,kBAAkB;AAClB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oBAAoB;;AAEzC;AACA,kFAAkF,aAAa;;AAE/F,wGAAwG,+BAA+B;;AAEvI;AACA,0EAA0E,oBAAoB;AAC9F,wIAAwI,kBAAkB;AAC1J;AACA;AACA;AACA,kBAAkB;AAClB,8IAA8I,mBAAmB;AACjK;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;AClEA;AAAA;AAAA;AAAA;AAAqC;AAIb;AACxB,8CAA8C,yEAA2B;AACpC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,GAAG,4EAA8B;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;;AAER;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA,EAAE,yEAA2B;AAC7B;AACA;AACA;AACA;AACA;AACA,EAAE,yEAA2B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,EAAE,yEAA2B;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,qBAAqB,yEAA2B;AAChD;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,uBAAuB,yEAA2B;AAClD;AACA;AACA;;AAEA,qBAAqB,yEAA2B;AAChD;AACA;AACA;;AAEA,oCAAoC,yEAA2B;AAC/D;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,yEAA2B;AACxD;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,EAAE,4DAAQ;AACV;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE,yDAAW;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA,mDAAmD,mBAAmB;AACtE;AACA;AACA;AACA;AACA,cAAc,SAAS,EAAE,OAAO,OAAO,SAAS;AAChD;AACA,uCAAuC,SAAS;AAChD;AACA;AACA;;AAEA;AACA,mDAAmD;AACnD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,yCAAyC;AACvE;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,8CAA8C,OAAO,IAAI,WAAW,QAAQ;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,+CAA+C,OAAO,IAAI,WAAW,IAAI,SAAS,QAAQ;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,yFAA0B,EAAC;;;;;;;;;;;;;AClX1C;AAAA;AAAA;AAAA;AAAyC;;AAEzC;AACA;AACA;AACA,iDAAiD,MAAM;AACvD;AACA,oCAAoC,qDAAe;;AAEnD;AACA;AACA,QAAQ,qDAAe;AACvB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,2BAA2B,qDAAe;;AAE1C;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEuE","file":"0.script.js","sourcesContent":["const AJAX_TIMEOUT_REASON = 'AJAX_TIMEOUT';\nconst TIMEOUT = 5000;\n\nconst URL = '/report-flag';\nconst CONTENT_TYPE = 'application/json';\n\nconst sendAjax = (data) => {\n  return new Promise((resolve, reject) => {\n    const timeoutId = setTimeout(() => {\n      reject(AJAX_TIMEOUT_REASON);\n    }, TIMEOUT);\n\n    fetch(URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': CONTENT_TYPE,\n      },\n      body: JSON.stringify(data),\n    }).then(async (value) => {\n      clearTimeout(timeoutId);\n\n      // let text = null;\n      // if (purpose === AJAX_PURPOSE.UN_FLAG) {\n      //   try {\n      //     text = await value.text();\n      //   } catch ( e ) {\n      //     console.error( 'value.text not worked... /e: ', e );\n      //   }\n      // }\n\n      console.warn('fetch response: ', value /*, ' /?:', text*/);\n\n      // const resolveValue = purpose === AJAX_PURPOSE.FLAG ? value.json() : 'ok';\n      resolve(value.json());\n    });\n  });\n};\n\nexport default sendAjax;\n","const { NOTICE_LENGTH, POPUP_LABELS } = FLAG_REASONS_METADATA;\n\nexport const swapElement = (referenceNode, html) => {\n  const tmpParent = document.createElement('div');\n  tmpParent.innerHTML = html;\n\n  const newElement = tmpParent.removeChild(tmpParent.firstElementChild);\n  referenceNode.parentNode.insertBefore(newElement, referenceNode);\n  referenceNode.remove();\n\n  // return newElement;\n};\n\nexport const elementsHTMLMap = new Map([\n  [\n    'textarea',\n    `<textarea id=\"customReportReason\"\n        class=\"report-reason-popup__custom-report-reason\"\n        name=\"reportReason\"\n        data-requirable=\"true\"\n        maxlength=\"${NOTICE_LENGTH}\"\n        rows=\"3\"\n        cols=\"47\"></textarea>`,\n  ],\n  [\n    'getListItem',\n    ({ reasonKey, reasonValue, index, isLast, textAreaDOM }) => {\n      return `\n            <!-- TODO: handle checking inputs while tabbing -->\n            <li tabindex=\"1\">\n                <label for=\"${reasonKey}\">\n                    <input id=\"${reasonKey}\" \n                            type=\"radio\" \n                            value=\"${index}\" \n                            name=\"reportReason\" \n                            data-requirable=\"true\">\n                    ${reasonValue}\n                </label>\n                ${isLast ? textAreaDOM : ''}\n            </li>\n        `;\n    },\n  ],\n  [\n    'getPopupWrapper',\n    (listItemsDOM) => {\n      return `\n            <div id=\"reportReasonPopup\" class=\"report-reason-popup\">\n                <p>${POPUP_LABELS.HEADER}</p>\n                \n                <form method=\"post\" class=\"report-reason-popup__form\">\n                    <ul id=\"reportReasonList\" class=\"report-reason-popup__list\">${listItemsDOM}</ul>\n                \n                    <p id=\"reportReasonValidationError\" class=\"report-reason-popup__validation-error\">${POPUP_LABELS.NO_REASON_CHECKED}</p>\n                    \n                    <!-- TODO: why its input not button? -->\n                    <input id=\"cancelReportReason\" type=\"button\" value=\"${POPUP_LABELS.CANCEL}\" class=\"report-reason-popup__button report-reason-popup__button--cancel\">\n                    <button id=\"sendReportReason\" type=\"submit\" class=\"report-reason-popup__button report-reason-popup__button--save\">${POPUP_LABELS.SEND}</button>\n                </form>\n            </div>\n            <div id=\"reportReasonSuccessInfo\" class=\"report-reason-popup__success-info\">\n                ${POPUP_LABELS.REPORT_SENT}\n                <button id=\"closeReportReasonSentInfo\" class=\"report-reason-popup__button report-reason-popup__button--close\" type=\"button\">${POPUP_LABELS.CLOSE}</button>\n            </div>`;\n    },\n  ],\n]);\n","import sendAjax from './ajaxService';\nimport {\n  reportReasonPopupDOMWrapper,\n  reportReasonPopupDOMReferences,\n} from './popupFactory';\nconsole.warn('reportReasonPopupDOMWrapper: ', reportReasonPopupDOMWrapper);\nimport { swapElement } from './misc';\n\nconst {\n  reportReasonPopup,\n  reportReasonPopupForm,\n  customReportReason,\n  reportReasonSuccessInfo,\n  requirableFormElements,\n  reportReasonValidationError,\n} = reportReasonPopupDOMReferences;\nconst questionViewMeta = document.querySelector('.qa-q-view-meta');\n\nconst BTN_NAME_SUFFIXES_REGEX = /do(clear|un)?flag[s]?/;\nconst FLAG_BTN_NAME_SUFFIX = 'doflag';\n// const doCommentInputNameSuffix = '_docomment';\nconst reportFlagMap = {\n  regex: {\n    question: /q_doflag/,\n    answer: /^a(\\d+)_doflag/,\n    comment: /^c(\\d+)_doflag/,\n    doComment: /^a(\\d+)_docomment/,\n  },\n  getPostIdFromInputName(postType, inputName) {\n    // TODO: check if it works (changed exec to match)...\n    const [, postId] = inputName.match(this.regex[postType]);\n    return postId;\n  },\n  recognizeInputKindByName(inputName) {\n    const [mappedInputNameRegexKey] = Object.entries(\n      this.regex\n    ).find(([regexKey, regexValue]) => regexValue.test(inputName));\n    return mappedInputNameRegexKey;\n  },\n  collectForumPostMetaData() {\n    const postType = this.recognizeInputKindByName(flagButtonDOM.name);\n    const postRootSource = flagButtonDOM.form.getAttribute('action');\n    const postMetaData = {\n      questionId: postRootSource.split('/')[1],\n      postType: postType.slice(0, 1),\n    };\n    postMetaData.postId =\n      this.getPostIdFromInputName(postType, flagButtonDOM.name) ||\n      postMetaData.questionId;\n\n    // if (postType === 'answer') {\n    //   postMetaData.answerId = this.getPostIdFromInputName(\n    //     'answer',\n    //     flagButtonDOM.name\n    //   );\n    // } else if (postType === 'comment') {\n\n    // const doCommentInputDOM = flagButtonDOM.parentElement.querySelector(\n    //   `[name*=\"${doCommentInputNameSuffix}\"]`\n    // );\n    // postMetaData.answerId = this.getPostIdFromInputName(\n    //   'doComment',\n    //   doCommentInputDOM.name\n    // );\n\n    //   postMetaData.commentId = this.getPostIdFromInputName(\n    //     'comment',\n    //     flagButtonDOM.name\n    //   );\n    // }\n\n    return postMetaData;\n  },\n};\n\nlet bootstrapUsed = false;\nlet flagButtonDOM = null;\n\nconst showReportReasonPopup = (originalFormActionAttribute) => {\n  reportReasonPopupForm.action = originalFormActionAttribute;\n  reportReasonPopupDOMWrapper.classList.add('report-reason-wrapper--show');\n};\nconst hideReportReasonPopup = () => {\n  reportReasonSuccessInfo.classList.remove(\n    'report-reason-popup__success-info--show'\n  );\n  reportReasonPopupDOMWrapper.classList.remove('report-reason-wrapper--show');\n  customReportReason.classList.remove(\n    'report-reason-popup__custom-report-reason--show'\n  );\n  reportReasonPopup.classList.remove('report-reason-popup--hide');\n  reportReasonValidationError.classList.remove(\n    'report-reason-popup__validation-error--show'\n  );\n  reportReasonPopupForm.reset();\n};\nconst bootstrapReportReasonPopup = () => {\n  if (bootstrapUsed) {\n    throw 'bootstrapReportReasonPopup should be called only once!';\n  }\n\n  initOffClickHandler();\n  initReasonList();\n  initButtons();\n  initPopupContainer();\n\n  bootstrapUsed = true;\n};\nbootstrapReportReasonPopup.handler = reportReasonFlagButtonHandler;\n\nfunction reportReasonFlagButtonHandler(event) {\n  if (event.target.name && event.target.name.endsWith(FLAG_BTN_NAME_SUFFIX)) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    handleFlagClick(event.target);\n  }\n}\n\nfunction handleFlagClick(target) {\n  flagButtonDOM = target;\n  showReportReasonPopup(target.form.action);\n}\n\nfunction initOffClickHandler() {\n  reportReasonPopupDOMWrapper.addEventListener('click', (event) => {\n    const checkDOMElementsId = (DOMElement) =>\n      DOMElement.id === 'reportReasonPopup' ||\n      DOMElement.id === 'reportReasonSuccessInfo';\n    const clickedOutsidePopup = !event.composedPath().some(checkDOMElementsId);\n\n    if (clickedOutsidePopup) {\n      hideReportReasonPopup();\n    }\n  });\n}\n\nfunction initReasonList() {\n  const reasonList = reportReasonPopupDOMWrapper.querySelector(\n    '#reportReasonList'\n  );\n  reasonList.addEventListener('change', ({ target }) => {\n    reportReasonValidationError.classList.remove(\n      'report-reason-popup__validation-error--show'\n    );\n\n    if (reasonList.children[reasonList.children.length - 1].contains(target)) {\n      customReportReason.classList.add(\n        'report-reason-popup__custom-report-reason--show'\n      );\n      setTimeout(customReportReason.focus.bind(customReportReason));\n    } else {\n      customReportReason.classList.remove(\n        'report-reason-popup__custom-report-reason--show'\n      );\n    }\n  });\n}\n\nfunction initButtons() {\n  const cancelButton = reportReasonPopupDOMWrapper.querySelector(\n    '#cancelReportReason'\n  );\n  cancelButton.addEventListener('click', hideReportReasonPopup);\n\n  const sendButton = reportReasonPopupDOMWrapper.querySelector(\n    '#sendReportReason'\n  );\n  sendButton.addEventListener('click', submitForm);\n\n  const closeReportReasonSentInfo = reportReasonPopupDOMWrapper.querySelector(\n    '#closeReportReasonSentInfo'\n  );\n  closeReportReasonSentInfo.addEventListener('click', hideReportReasonPopup);\n}\n\nfunction initPopupContainer() {\n  const popupContainer = document.querySelector('.qa-body-wrapper');\n  popupContainer.appendChild(reportReasonPopupDOMWrapper);\n}\n\nfunction submitForm(event) {\n  event.preventDefault();\n\n  const sendButton = event.target;\n  sendButton.blur();\n\n  const isFormValid = validateForm(sendButton);\n  if (!isFormValid) {\n    return;\n  }\n\n  toggleSendWaitingState(sendButton, true);\n\n  const formData = prepareFormData();\n  sendAjax(formData).then(\n    (response) => {\n      console.warn('response:', response);\n      onAjaxSuccess(response, formData, sendButton);\n    },\n    (ajaxError) => onAjaxError(sendButton, ajaxError)\n  );\n}\n\nfunction onAjaxSuccess(response, formData, sendButton) {\n  toggleSendWaitingState(sendButton, false);\n  updateCurrentPostFlags(response.currentFlags, formData);\n  swapElement(\n    flagButtonDOM,\n    getUnflagButtonHTML({\n      postType: formData.postType,\n      questionId: formData.questionId,\n      postId: formData.postId,\n      parentId: getPostParentId(),\n    })\n  );\n  showSuccessPopup();\n}\n\nfunction onAjaxError(sendButton, ajaxError) {\n  toggleSendWaitingState(sendButton, false);\n  // TODO: add proper error handling\n  console.warn('ajaxError:', ajaxError);\n}\n\nfunction validateForm(sendButton) {\n  const isAnyFormElementUsed = [...requirableFormElements].some((element) => {\n    const isCheckedRadioInput =\n      element.type === 'radio' && element.value !== 'custom' && element.checked;\n    const isFilledTextArea =\n      element.tagName.toLowerCase() === 'textarea' && element.value;\n\n    return isCheckedRadioInput || isFilledTextArea;\n  });\n\n  if (!isAnyFormElementUsed) {\n    notifyAboutValidationError(sendButton);\n  }\n\n  return isAnyFormElementUsed;\n}\n\nfunction notifyAboutValidationError(sendButton) {\n  reportReasonValidationError.classList.add(\n    'report-reason-popup__validation-error--show'\n  );\n  sendButton.classList.add(\n    'report-reason-popup__button--save--validation-blink'\n  );\n  setTimeout(() => {\n    sendButton.classList.remove(\n      'report-reason-popup__button--save--validation-blink'\n    );\n  }, 1000);\n}\n\nfunction prepareFormData() {\n  const reportMetaData = reportFlagMap.collectForumPostMetaData();\n  const [reasonId, notice] = new FormData(reportReasonPopupForm).getAll(\n    'reportReason'\n  );\n\n  return {\n    ...reportMetaData,\n    reasonId,\n    notice,\n    reportType: 'addFlag',\n  };\n}\n\nfunction toggleSendWaitingState(buttonReference, isWaiting) {\n  if (isWaiting) {\n    buttonReference.disabled = true;\n    window.qa_show_waiting_after(buttonReference, true);\n  } else {\n    window.qa_hide_waiting(buttonReference);\n    buttonReference.disabled = false;\n  }\n}\n\nfunction updateCurrentPostFlags(currentFlagsHTML, { postType, postId }) {\n  const flagsMetadataWrapper =\n    postType === 'q'\n      ? questionViewMeta\n      : document.querySelector(\n          `#${postType}${postId} .qa-${postType}-item-meta`\n        );\n  const targetElementSelector = `.qa-${postType}-item-flags`;\n  const targetElement = flagsMetadataWrapper.querySelector(\n    targetElementSelector\n  );\n\n  if (targetElement) {\n    /*swapElement(targetElement, currentFlagsHTML);*/\n    targetElement.outerHTML = currentFlagsHTML;\n  } else {\n    const responseAsDOM = new DOMParser()\n      .parseFromString(currentFlagsHTML, 'text/html')\n      .querySelector(targetElementSelector);\n    flagsMetadataWrapper.appendChild(responseAsDOM);\n  }\n}\n\nfunction showSuccessPopup() {\n  reportReasonPopup.classList.add('report-reason-popup--hide');\n  reportReasonSuccessInfo.classList.add(\n    'report-reason-popup',\n    'report-reason-popup__success-info--show'\n  );\n}\n\nfunction getPostParentId() {\n  const parentElement = flagButtonDOM.closest('[id*=\"_list\"]');\n\n  if (!parentElement) {\n    return null;\n  }\n\n  const parentElementPostId = parentElement.id.slice(\n    1,\n    parentElement.id.indexOf('_')\n  );\n  return parentElementPostId;\n}\n\nfunction getUnflagButtonHTML({ postType, questionId, postId, parentId }) {\n  switch (postType) {\n    case 'q': {\n      return `\n        <input name=\"q_dounflag\" \n          onclick=\"qa_show_waiting_after(this, false);\" \n          value=\"wycofaj zgłoszenie\" \n          title=\"Wycofaj zgłoszenie tej treści\" \n          type=\"submit\" \n          class=\"qa-form-light-button qa-form-light-button-unflag\">\n      `;\n    }\n    case 'a': {\n      return `\n        <input name=\"a${postId}_dounflag\" \n            onclick=\"return qa_answer_click(${postId}, ${questionId}, this);\" \n            value=\"wycofaj zgłoszenie\" \n            title=\"Wycofaj zgłoszenie tej treści\" \n            type=\"submit\" \n            class=\"qa-form-light-button qa-form-light-button-unflag\">\n      `;\n    }\n    case 'c': {\n      return `\n        <input name=\"c${postId}_dounflag\" \n            onclick=\"return qa_comment_click(${postId}, ${questionId}, ${parentId}, this);\" \n            value=\"wycofaj zgłoszenie\" \n            title=\"Wycofaj zgłoszenie tej treści\" \n            type=\"submit\" \n            class=\"qa-form-light-button qa-form-light-button-unflag\">\n      `;\n    }\n    default: {\n      console.error(\n        'Unrecognized postType!',\n        postType,\n        ' /questionId: ',\n        questionId,\n        ' /postId: ',\n        postId\n      );\n    }\n  }\n}\n\nexport default bootstrapReportReasonPopup;\n","import { elementsHTMLMap } from './misc';\n\nconst reportReasonPopupDOMWrapper = (function () {\n  const listItemsDOM = Object.entries(FLAG_REASONS_METADATA.REASON_LIST).reduce(\n    (listItems, [reasonKey, reasonValue], index, flagReasonsCollection) => {\n      // const reasonItemId = `reportReasonItem${index}`;\n      const isLast = index === flagReasonsCollection.length - 1;\n      const textAreaDOM = isLast && elementsHTMLMap.get('textarea');\n\n      return (\n        listItems +\n        elementsHTMLMap.get('getListItem')({\n          reasonKey,\n          reasonValue,\n          index,\n          isLast,\n          textAreaDOM,\n        })\n      );\n    },\n    ''\n  );\n\n  const popupWrapper = document.createElement('div');\n  popupWrapper.classList.add('report-reason-wrapper');\n  popupWrapper.innerHTML = elementsHTMLMap.get('getPopupWrapper')(listItemsDOM);\n\n  return popupWrapper;\n})();\n\nconst reportReasonPopupDOMReferences = {\n  reportReasonPopup: reportReasonPopupDOMWrapper.querySelector(\n    '#reportReasonPopup'\n  ),\n  reportReasonPopupForm: reportReasonPopupDOMWrapper.querySelector('form'),\n  customReportReason: reportReasonPopupDOMWrapper.querySelector(\n    '#customReportReason'\n  ),\n  reportReasonSuccessInfo: reportReasonPopupDOMWrapper.querySelector(\n    '#reportReasonSuccessInfo'\n  ),\n  requirableFormElements: reportReasonPopupDOMWrapper.querySelectorAll(\n    '[data-requirable=\"true\"]'\n  ),\n  reportReasonValidationError: reportReasonPopupDOMWrapper.querySelector(\n    '#reportReasonValidationError'\n  ),\n};\n\nexport { reportReasonPopupDOMReferences, reportReasonPopupDOMWrapper };\n"],"sourceRoot":""}